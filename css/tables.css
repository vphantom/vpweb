@layer vp.components {
	table:is(.vp, .vp *):not(.xvp, .xvp *) {
		position: relative;
		border-collapse: collapse;
	}

	th:is(.vp, .vp *):not(.xvp, .xvp *) {
		background-color: rgba(var(--vp-dim), 0.2);
	}

	table.stick-vertical:is(.vp, .vp *):not(.xvp, .xvp *)
		:is(thead, tfoot)
		tr
		> th {
		background-color: #ddd; /* sticky -> no alpha */
		position: sticky;
		top: -1px; /* Compensate vanishing border */
		z-index: 10;
		transition: none;
	}

	table.stick-vertical:is(.vp, .vp *):not(.xvp, .xvp *) tfoot tr > th {
		bottom: -1px; /* Compensate vanishing border */
	}

	table.stick-horizontal:is(.vp, .vp *):not(.xvp, .xvp *)
		tr
		> th:first-child {
		background-color: #ddd; /* sticky -> no alpha */
		position: sticky;
		left: 0;
		z-index: 11;
		transition: none;
	}

	/* prettier-ignore */
	table.stick-horizontal:is(.vp, .vp *):not(.xvp, .xvp *) :is(thead, tfoot) tr > th:first-child {
	z-index: 12;
}

	table.striped:is(.vp, .vp *):not(.xvp, .xvp *)
		tbody
		tr:nth-child(even)
		> td {
		background-color: rgba(var(--vp-dim), 0.05);
	}

	table:where(.vp, .vp *):not(.xvp, .xvp *) tr > * {
		text-align: left;
		vertical-align: top;
	}

	table.horizontal:is(.vp, .vp *):not(.xvp, .xvp *) tbody tr > * {
		border-bottom: 0.5px solid rgba(var(--vp-dim), 0.33);
	}

	table.gridded:is(.vp, .vp *):not(.xvp, .xvp *) tr > * {
		border: 0.5px solid rgba(var(--vp-dim), 0.33);
	}

	/* Work around lack of calc(attr()) support in 2024. */

	[vp-center~='1'] > * > :nth-child(1),
	[vp-center~='2'] > * > :nth-child(2),
	[vp-center~='3'] > * > :nth-child(3),
	[vp-center~='4'] > * > :nth-child(4),
	[vp-center~='5'] > * > :nth-child(5),
	[vp-center~='6'] > * > :nth-child(6),
	[vp-center~='7'] > * > :nth-child(7),
	[vp-center~='8'] > * > :nth-child(8),
	[vp-center~='9'] > * > :nth-child(9) {
		text-align: center;
	}

	[vp-right~='1'] > * > :nth-child(1),
	[vp-right~='2'] > * > :nth-child(2),
	[vp-right~='3'] > * > :nth-child(3),
	[vp-right~='4'] > * > :nth-child(4),
	[vp-right~='5'] > * > :nth-child(5),
	[vp-right~='6'] > * > :nth-child(6),
	[vp-right~='7'] > * > :nth-child(7),
	[vp-right~='8'] > * > :nth-child(8),
	[vp-right~='9'] > * > :nth-child(9) {
		text-align: right;
	}

	[vp-mono~='1'] > * > :nth-child(1),
	[vp-mono~='2'] > * > :nth-child(2),
	[vp-mono~='3'] > * > :nth-child(3),
	[vp-mono~='4'] > * > :nth-child(4),
	[vp-mono~='5'] > * > :nth-child(5),
	[vp-mono~='6'] > * > :nth-child(6),
	[vp-mono~='7'] > * > :nth-child(7),
	[vp-mono~='8'] > * > :nth-child(8),
	[vp-mono~='9'] > * > :nth-child(9) {
		font-family: var(--vp-mono);
	}

	table:is(.vp, .vp *):not(.xvp, .xvp *) tr > * {
		padding: calc(var(--vp-pad) / 2) var(--vp-pad);
		font-size: 90%;
	}

	table:is(.vp, .vp *):not(.xvp, .xvp *).vp-2d thead tr > *:first-child {
		border: none;
		background: transparent;
	}

	/* FIXME: is it just me or does .stacking conflict with grid's which forces the
 * doubling in some of our rules? */
	@media only screen and (not (min-width: 768px)) {
		/* Mobile */
		table.stacking:is(.vp, .vp *):not(.xvp, .xvp *) {
			width: 100%;
		}
		table.stacking:is(.vp, .vp *):not(.xvp, .xvp *) tbody tr {
			border-bottom: 2px solid rgba(var(--vp-dim), 0.33);
		}
		table.stacking:is(.vp, .vp *):not(.xvp, .xvp *) :is(th, td) {
			width: auto;
			display: block;
			border: none;
		}
	}
}
